define(['./request'], function(Request) {
    // Response generated by Request handlers
    var Response = function(opt_code, opt_reason, opt_headers, opt_body, opt_contenttype) {
        opt_code !== undefined        && this.code(opt_code);
        opt_reason !== undefined      && this.reason(opt_reason);
        opt_headers !== undefined     && this.header(opt_headers);
        opt_body !== undefined        && this.body(opt_body);
        opt_contenttype !== undefined && this.header({ 'content-type':opt_contenttype });
        this.__renderers = [];
    };
    
    // code(200) -> this; code() -> 200;
    Response.prototype.code = function(opt_code) {
        if (opt_code !== undefined) { this.__code = opt_code; return this; }
        return this.__code;
    };
    // reason('phrase') -> this; reason() -> 'phrase';
    Response.prototype.reason = function(opt_reason) {
        if (opt_reason !== undefined) { this.__reason = opt_reason; return this; }
        return this.__reason;
    };
    // header({ key1:'value1', key2:'value2' }) -> this;  header('key','value) -> this;  header('key') -> value;
    Response.prototype.header = function(key_or_headerKVs, opt_value) {
        if (!this.__headers) { this.__headers = {}; }
        if (key_or_headerKVs === undefined) { return this.__headers; }
        if (typeof(key_or_headerKVs) == 'object') {
            for (var k in key_or_headerKVs) { this.__headers[k] = key_or_headerKVs[k]; }
            return this;
        }
        if (opt_value !== undefined) { this.__headers[key_or_headerKVs] = opt_value; return this; }
        return this.__headers[key_or_headerKVs];
    };
    // body('<html />', 'text/html') -> this;  body() -> '<html />';
    Response.prototype.body = function(opt_body, opt_contenttype) {
        if (opt_body === undefined && opt_contenttype === undefined) { return this.__body; }
        this.__body = opt_body;
        opt_contenttype && this.header({ 'content-type':opt_contenttype });
        return this;
    };
    
    // Tests if the given parameters match against the response
    Response.prototype.matches = function(matchParams) {
        for (var key in matchParams) {
            var prop = matchParams[key];
            if (key == 'code' && prop != this.__code) { return false; }
            if (key == 'reason' && prop != this.__reason) { return false; }
            // :TODO: better content type matching
            if (key == 'content-type' && this.__headers['content-type'] && this.__headers['content-type'].indexOf(prop) == -1) { return false; }
            if (this.__headers[key] && prop != this.__headers[key]) { return false; }
        }
        return true;
    };

    // Helper which simply writes the response to the given dom element
    Response.prototype.renderTo = function(elem) {
        if (typeof(elem) == 'string') { elem = document.getElementById(elem); }
        // Render
        if (this.fail()) {
            elem.innerHTML = '' + this.__code;
            if (this.__reason) { elem.innerHTML += ' ' + this.__reason; }
            if (this.__body) { elem.innerHTML += "<br />\n" + this.__body; }
        } else if (this.__body !== null) {
            if (this.__code != 204 && this.__code != 205) {
                elem.innerHTML = this.__body;
            }
        }
        // Run callbacks
        for (var i=0; i < this.__renderers.length; i++) {
            var renderer = this.__renderers[i];
            renderer.cb.call(renderer.context, this, elem);
        }
    };

    // Adds a callback to run at the end of .renderTo
    Response.prototype.addRenderer = function(cb, opt_context) {
        this.__renderers.push({ cb:cb, context:opt_context });
    };

    // Response code in the 200 range?
    Response.prototype.ok = function() {
        return (this.__code >= 200 && this.__code < 300);
    };

    // Response code out of the 200 range?
    Response.prototype.fail = function() {
        return !this.ok();
    };

    return Response;
});